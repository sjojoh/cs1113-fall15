-- total functions
-- block comments
-- symbolic arguments
-- pattern matching: any argument

module bool
import pair
 

data bool = true | false

id: bool -> bool
id b = b

constFalse: bool -> bool
constFalse _ = false


constTrue: bool -> bool
constTrue _ = true

not: bool -> bool
not true = false
not _ = true
---1
andp: pair bool bool -> bool
andp (mkPair true true) = true
andp _  = false

and: bool -> bool -> bool
and true true = true 
and _ _ = false 
---2
xorp: pair bool bool ->bool
xorp (mkPair false false) = false
xorp (mkPair true true) = false
xorp _ = true 

orp: bool -> bool -> bool
orp false false = false
orp true ture = false
orp _ _ = true 

---3
nandp: pair bool bool -> bool
nandp (mkPair a b) = not (andp (mkPair a b))

andpp: bool -> bool -> bool
andpp a b = not (and a b) 


---4 
orp: pair bool bool -> bool 
orp (mkPair false false) = false
orp _ = true

orpp: bool -> bool -> bool
orpp false false = false
orpp _ _ = true 


---Exam problem #2: There are 16 possible ways to fill in the result
  ---column of a binery boolean function, and there are exactly 16
  ---functions, and no more. 

---exam problem #4 a 

pand: bool -> (bool -> bool)
pand true = bool.id  
pand false = constFalse 

por:bool -> bool -> bool 
por true = constTrue
por false = bool.id

pxor:bool -> bool -> bool
pxor true = bool.not 
pxor false = bool.id 

pnand: bool -> bool -> bool
pnand true = bool.not
pnand false = constTrue 

 
---binary function 
and: bool -> bool -> bool
and true true = true
and _ _ = false 

uf: bool -> bool
uf = (and true) 

or:bool -> bool -> bool
or false false = false 
or _ _ = true




