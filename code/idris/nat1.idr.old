module nat 

import bool
import pair

data nat = O | S nat


---Homework 5

---homework 8 

succ: nat -> nat 
succ n = S n 

y:nat
y = (succ O)

pred: nat -> nat
pred (S n) = n

evenb: nat -> bool 
evenb O = true 
evenb (S O) = false 
evenb (S(S n)) = evenb n

oddb: nat -> bool 
oddb n = not (evenb n)

---homework 9 


---homework 10
---For evenb (S r) is to apply evenb function to (S r).(S r) means the
---successor of r, which is the successor of S(S(S O)). After
---simplification, we will get 3 and S of 3 is 4. Applying evenb to 4,
---we get true in the end. 
  
---homework 11 
addp: pair nat nat -> nat
addp (mkPair O m) = m 
addp (mkPair (S n) m) = S (addp(mkPair n m)) 

add: nat -> nat -> nat
add O m = m 
add (S n) m = S (add n m) 

pf: nat -> nat
pf = add (S(S O))


 
 


multp:pair nat nat ->nat
multp (mkPair O m) = O 
multp (mkPair (S n) m) = addp (mkPair m (multp (mkPair n m))) 

mult:nat -> nat -> nat
mult O m = O 
mult (S n) m = add m (mult m n)
  
    
factp:nat ->nat 
factp O = S O
factp (S n) = multp (mkPair (S n) (factp n))

fact:nat -> nat 
fact O = S O 
fact (S n) = mult (S n) (fact n) 


subp:pair nat nat -> nat
subp (mkPair O m) = O 
subp (mkPair n O) = n 
subp (mkPair (S n) (S m)) = subp (mkPair n m) 

sub: nat -> nat -> nat
sub O m = O 
sub n O = n 
sub (S n) (S m) = sub n m 
 
  



lep: pair nat nat -> bool 
lep (mkPair O (S O)) = true 
lep (mkPair (S O) O) = false 
lep (mkPair (S n) (S m)) = lep (mkPair n m)

lepp: nat -> nat -> bool
lepp O (S O) = true
lepp (S O) O = true
lepp (S n) (S m) = lepp n m  






exp: pair nat nat -> nat
exp(mkPair m O) = S O
exp(mkPair m (S n)) = multp (mkPair m (exp(mkPair m n)))

expp: nat -> nat -> nat
expp m O = S O 
expp m (S n) = mult m (expp m n)







eqp: pair nat nat -> bool 
eqp (mkPair O O) = true
eqp (mkPair (S O) O) = false
eqp (mkPair O (S O)) = false
eqp (mkPair (S m) (S n)) = eqp (mkPair (subp (mkPair m n)) (subp (mkPair m n)))

eqpp: nat -> nat -> bool
eqpp (S O) O = true 
eqpp O (S O) = false
eqpp (S m) (S n) = eqpp m n 





gtp: pair nat nat -> bool
gtp (mkPair O O) = false
gtp (mkPair (S O) O) = true
gtp (mkPair O (S O)) = false
gtp (mkPair (S m) (S n)) = gtp (mkPair m n) 

gtpp: nat -> nat -> bool
gtpp O O = false
gtpp (S O) O = true
gtpp O (S O) = false
gtpp (S m) (S n) = gtpp m n 






gep: pair nat nat -> bool 
gep (mkPair O O) = true
gep (mkPair (S O) O) = true
gep (mkPair O (S O)) = false 
gep (mkPair (S m) (S n)) = gep (mkPair m n) 

gepp: nat -> nat -> bool
gepp O O = true
gepp (S O) O = true
gepp O (S O) = false
gepp (S m) (S n) = gepp m n 



Itp: pair nat nat -> bool
Itp (mkPair m n) = not (gep (mkPair m n))

Itpp: nat -> nat -> bool 
Itpp m n = not (gepp m n) 
